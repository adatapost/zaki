Arrays
==============================================================

Arrays in C# are sub-classes of System.Array class automatically. It means an array variable is a reference variable.

You can use following syntax to declare an array:

 datatype []varName;  //one dimensional
 datatype [,]varName; //two dim or put extra comma to add new dim
 
 datatype [][]varName; //Array of array OR nested or Jagged array
                       
For example,

   int []nos;  where "nos" is reference variable of type System.Array

[Note: [ ] subscript operator must appear before the variable name]

Creating an array
-----------------
You can use "new" keyword or use array initializer syntax:

 1. new operator

    int []nos = new int[3];
    Or
    int []nos;
          nos = new int[3];
    Or
          nos = new int[3] {value1,2,3};

 2. Array initializer

     int []nos = {11,22,33};


System.Array methods
=====================
1. Length - It returns count of elements
2. Rank - It reutrns 1 if array is one-dim
                     2 if          two-dim and so on
3. Array.Sort() - Sort array elements
4. Array.Reverse() - Reverse array elements

Traverse the arrays
===================
You can choose "simple for" loop:
 
   int []nos = {11,22,33,44};

    for(int i=0;i<nos.Length;i++) 
    {
        Console.WriteLine( nos[i] );
     }

Or use for-in loop:

   for-in or for-each loop is specially used to traverse the arrays and    collections.

   int []nos = {11,22,33,44};
   
    foreach(int no in nos)
     {
        Console.WriteLine(no);
      }

Example: Sort the array
        string[] cities = new string[3];
        cities[0] = "Mehsana";
        cities[1] = "Ahm";
        cities[2] = "Patan";

        Array.Sort(cities);

        foreach (var city in cities)
            Console.WriteLine(city);

Two or multi-dim array and other methods
==========================================

 Rank property returns dimension value (1 for one,2 for two ...)
 GetUpperBound(dim) - Returns upper bound of given dimension
 GetLowerBound(dim) - Returns lower limit of given dim. (Always 0 in                                                          C#)

        int[] a = new int[20];
        int[,] b = new int[4, 5];
        int[, ,] c = new int[2, 3, 4];

        Console.WriteLine(a.Rank); //1
        Console.WriteLine(b.Rank); //2
        Console.WriteLine(c.Rank); //3

        Console.WriteLine(a.GetUpperBound(0)); //19
        Console.WriteLine(b.GetUpperBound(0) + " " + b.GetUpperBound(1));  //3 4

Traverse two or multi-dim arrays -- Always use GetUpperBound()
---------------------------------
        int[,] a = new int[3, 4];
        a[0, 0] = 1;
        a[1, 2] = 3;
        a[2, 3] = 6;
        for (int i = 0; i <= a.GetUpperBound(0); i++)
        {
            for (int j = 0; j <= a.GetUpperBound(1); j++)
            {
                Console.Write(" " + a[i,j]);
            }
            Console.WriteLine();
        }

Array of array (Jagged array)
==================================
An array that contains references of other array like this:

       int[][] a;
        a = new int[3][];  //Create an array for three arrays

        a[0] = new int[5]; //first array stored at 0 index
        a[1] = new int[] { 11, 22, 33};
        a[2] = new int[10];

        foreach (int[] t in a)
        {
            foreach (var i in t)
            {
                Console.Write(" " + i);
            }
            Console.WriteLine();
        }

Array of objects
===================
 When you create an array of any class then it wont instantiate that class. You have to create instances at yours.

        Student[] students = new Student[3]; // It create three                                              // reference variable of                                              // Student
       
        //Now creating three objects of student class
        students[0] = new Student() { Roll = 1, Name = "B" };
        students[1] = new Student() { Roll = 32, Name = "E" };
        students[2] = new Student() { Roll = 6, Name = "R" };

        foreach (var s in students)
        {
            Console.WriteLine(s.Roll + " " + s.Name );
        }


Note:

Arrays specifically used when the count of elements are known as the time of array creating. Do not use array when you size of elements are not known. In that case we will learn/use "Collection" classes.


